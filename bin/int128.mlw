module Int128

    use list.List
    use list.Mem
    use list.Length
    use int.Int
    use ref.Ref

    type int128 = (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)
                   
    (* useful constants *)
    let zero128: int128 = (
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0
    )

    let one128: int128 = (
        0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  1
    )

    let maxint128: int128 = (
        255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255
    )

    let int128_to_list (i: int128) : (list int) =
        match i with
        | (i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16) ->    
          Cons i1 (Cons i2 (Cons i3 (Cons i4 (Cons i5 (Cons i6 (Cons i7 (Cons i8 (Cons i9 (Cons i10 (Cons i11 (Cons i12 (Cons i13 (Cons i14 (Cons i15 (Cons i16 Nil))))))))))))))) 
        end

    predicate check_bytes (lst: list int) = 
    forall byte. mem byte lst -> byte > 0 /\ byte < 255
    
    let int128_from_list (lst : list int) 
    requires {check_bytes lst}
    =
    match lst with
    | Cons i1 (Cons i2 (Cons i3 (Cons i4 (Cons i5 (Cons i6 (Cons i7 (Cons i8 (Cons i9 (Cons i10 (Cons i11 (Cons i12 (Cons i13 (Cons i14 (Cons i15 (Cons i16 Nil))))))))))))))) ->
        (i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16)
    end
end

module Compute
    use mach.int.Int
    use int.ComputerDivision
    use list.List
    use list.Length
    

    let rec extend (a : list int) (b : list int) : (list int, list int) 
    =
    if length a = length b then (a,b)
    else if length a > length b then extend a (Cons 0 b)
    else extend (Cons 0 a) b

    let rec add (a : list int) (b : list int) : (int, list int) 
    =
        match (a, b) with
        | (Nil, Nil) -> (0, Nil)
        | (Cons a_digit a_rest, Cons b_digit b_rest) -> 
        let (rest_carry, rest_sum) = add a_rest b_rest in
        let digit_sum = a_digit + b_digit + rest_carry in
        ( digit_sum / 256, Cons (mod digit_sum 256) rest_sum)
        end 
end