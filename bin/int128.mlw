module Int128

    use int.Int
    use list.List
    use list.Mem
    use list.Length
    use array.Array
    
    type int128 = (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)
                   
    let constant min_int128 : int = -0x8000_0000_0000_0000_0000_0000_0000_0000
    let constant max_int128 : int = 0x7fff_ffff_ffff_ffff_ffff_ffff_ffff_ffff

    let int128_to_list (i: int128) : (array int) =
  
        let arr : array int = Array.make 16 0 in
        match i with
        | (i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16) ->    
        arr[ 0]<-i1; arr[ 1]<-i2; arr[ 2]<-i3; arr[ 3]<-i4; arr[ 4]<-i5; arr[ 5]<-i6;
        arr[ 6]<-i7; arr[ 7]<-i8; arr[ 8]<-i9; arr[ 9]<-i10; arr[10]<-i11; arr[11]<-i12;  
        arr[12]<-i13; arr[13]<-i14; arr[14]<-i15; arr[15]<-i16;
    return arr
    end

    predicate check_bytes (lst: list int) = 
    forall byte. mem byte lst -> byte > 0 /\ byte < 255
    
    let int128_from_list (lst : list int) 
    requires {check_bytes lst}
    =
    match lst with
    | Cons i1 (Cons i2 (Cons i3 (Cons i4 (Cons i5 (Cons i6 (Cons i7 (Cons i8 (Cons i9 (Cons i10 (Cons i11 (Cons i12 (Cons i13 (Cons i14 (Cons i15 (Cons i16 Nil))))))))))))))) ->
        (i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16)
    end
end